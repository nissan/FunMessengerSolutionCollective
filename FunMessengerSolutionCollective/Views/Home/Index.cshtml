@model FunMessengerSolutionCollective.Models.Message

@{
    Layout = null;

}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <!--TODO: Bundle these up and minify via BundleConfig.cs -->
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

    <!-- Latest compiled and minified JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>


    <title>Index</title>
</head>
<body>
    <div id="container" class="container">
        <div id="page-header" class="page-header"><h1><span class="label label-warning"> Offline </span></h1></div>
        <div id="new-message-form">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row panel panel-primary">
                    <div class="col-md-2">
                        <div class="panel panel-body">
                            <img src=@Model.SenderImageUrl class="img-circle" height="100" width="100" alt=@Model.SenderName />
                        </div>
                    </div>
                    <div class="col-md-10">
                        <div class="panel panel-title">
                            <h2>Send a new  message</h2>
                        </div>
                        <div class="panel panel-body">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Title, new { @id = "title", @maxlength = "140", @class = "form-control", @placeholder = "Enter title" })
                                @Html.ValidationMessageFor(mode => Model.Title, "", new { @class = "text-danger", })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label" })
                                @Html.TextAreaFor(model => model.Body, new { @id = "body", @maxlength = "1000", @class = "form-control", @placeholder = "Enter message" })
                                @Html.ValidationMessageFor(mode => Model.Body, "", new { @class = "text-danger", })
                            </div>
                            <div style="display:none">
                                @Html.HiddenFor(model => model.Id)
                                @Html.HiddenFor(model => model.ThreadId)
                                @Html.HiddenFor(model => model.SenderName)
                                @Html.HiddenFor(model => model.SenderImageUrl)
                            </div>
                            <input type="submit" class="btn btn-default" value="Send" />
                        </div>
                    </div>
                </div>
            }
        </div>
        <div id="display-messages-panel">

        </div>


        <div id="page-footer"></div>
    </div>

    <!--Use this block to test and verify ReactJS is setup properly-->
    <!--START-->
    @*
        <div id="output"></div>

        <!-- Your custom script here -->
        <script type="text/babel">
            const getMessage = () => "ReactJS working: check successful";
            document.getElementById('output').innerHTML = getMessage();

        </script>
    *@
    <!--END-->

    <script src="https://unpkg.com/react@15/dist/react.min.js"></script>
    <script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
    @* Not sure why referencing as follows doesn't work, maybe i need webpack to pre-compile jsx? Newbie problems, for now will embed script in page
        <script src="@Url.Content("~/Scripts/Messenger.jsx")"></script>*@
    <script type="text/babel">
        var PageHeader = React.createClass({
        render: function() {
        return (
        <div>
        <div className="page-header"><h1><span className="label label-success"> Online</span></h1></div>
        <div><span class="label label-info">To change sender append "?user=0" "?user=1" "?user=2" to address </span></div>
        </div>
        );
        }
        });

        var PageForm = React.createClass({
        getInitialState: function(){
        return {
        title:'',
        body:'',
        senderName:"Nissan Dookeran",
        senderImageUrl:"https://pbs.twimg.com/profile_images/340937461/nissan.jpg"
        }
        },
        handleSenderChange: function(e){
        this.setState({senderName: e.target.value});
        },
        handleTitleChange: function(e){
        this.setState({title: e.target.value});
        },
        handleBodyChange: function(e){
        this.setState({body: e.target.value});
        },
        handleSubmit: function(message){
        message.preventDefault();
        var data = new FormData();
        data.Append(senderName,this.state.senderName);
        data.Append(senderImageUrl,this.state.senderImageUrl);
        data.Append(title,this.state.title.trim());
        data.Append(body,this.state.body.trim());
        if (!message || !title) {return;}
        @*TODO: point it to the POST API call for message*@
        @*var xhr = new XMLHttpRequest();
            xhr.open('post', this.props.submitUrl, true);
            xhr.onload = function() {
            @*this.loadCommentsFromServer();
            }.bind(this);
            xhr.send(data);*@
        var xhr = new XMLHttpRequest();
        xhr.open('post', this.props.submitUrl, true);
        xhr.onload = function() {
        @*TODO: reload message list with updated message*@
        }.bind(this);
        xhr.send(data);
        },
        render: function() {
        return (
        <div className="row panel panel-primary">
            <div className="col-md-2">
                <div className="panel panel-body">
                    <img src={this.state.senderImageUrl} className="img-circle" height="100" width="100" alt={this.state.senderName} />
                </div>
            </div>
            <div className="col-md-10">
                <div class="panel panel-title">
                    <h2>Send a new  message</h2>
                </div>
                <div class="panel panel-body">
                    <form onSubmit={this.handleSubmit}>
                        <div className="form-group">
                            <label for="title">Subject:</label>
                            <input type="text" className="form-control" id="title" maxlength="140" placeholder="Enter title" value={this.state.title} onChange={this.handleTitleChange} />
                            <label for="message">Message:</label>
                            <textarea className="form-control" id="message" rows="10" cols="50" maxlength="1000" placeholder="Enter message" value={this.state.body} onChange={this.handleBodyChange}></textarea>
                        </div>
                        <button type="submit" className="btn btn-default">Submit</button>
                    </form>
                </div>
            </div>
        </div>
        );
        }
        });



        var PageMessage = React.createClass({
        render: function() {
        return (
        <div className="row panel panel-success">
            <div className="col-md-2">
                <div className="panel panel-body">
                    <img src={this.props.senderImageUrl} className="img-circle" height="100" width="100" alt="Nissan Dookeran" />
                </div>
            </div>
            <div className="col-md-10">
                <div className="panel panel-title">{this.props.senderName} </div><div className="panel panel-title"><span class="label label-info">Subject: {this.props.title}</span> </div>
                <div className="panel panel-body">{this.props.body}</div>
                <div className="panel panel-footer">Sent at {this.props.dateTimeStamp}</div>
            </div>
        </div>
        );
        }
        });

        var PageMessageList = React.createClass({
        getInitialState: function() {
        return {data:
        @*[{"id":"1","threadId":null,"senderName":"Nissan Dookeran","senderImageUrl":"https://pbs.twimg.com/profile_images/340937461/nissan.jpg","title":"Hi","body":"Hello world!","dateTimeStamp":"06/24/2017 20:17:03","isDeleted":false},{"id":"2","threadId":null,"senderName":"Captain Hook","senderImageUrl":"https://sup3rjunior.files.wordpress.com/2013/03/captain-hook.jpg","title":"Arrrgh!","body":"Ay matey, where to now?","dateTimeStamp":"06/24/2017 20:47:03","isDeleted":false},{"id":"3","threadId":null,"senderName":"Peter Pan","senderImageUrl":"https://drakalogia.wikispaces.com/file/view/4c4b3ee3cf63c82d77e04860c699876854bc4b79.jpg/499776162/4c4b3ee3cf63c82d77e04860c699876854bc4b79.jpg","title":"Yo ho ho","body":"Second start to the left and straight on till morning","dateTimeStamp":"06/24/2017 22:17:03","isDeleted":false}]*@
        []
        };
        },
        loadMessagesFromServer: function() {
        var xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = function() {
        var data = JSON.parse(xhr.responseText);
        this.setState({ data: data });
        }.bind(this);
        xhr.send();
        @*this.setState({ranFunction:"true"});*@
        @*this.setState({rawData:xhr.responseText});*@
        },
        componentDidMount: function() {
        this.loadMessagesFromServer();
        window.setInterval(this.loadMessagesFromServer, this.props.pollInterval);
        },
        render: function() {
        var messageNodes = this.state.data.map(function(message){
        return(
        <PageMessage messageId={message.id}
                     senderName={message.senderName}
                     senderImageUrl={message.senderImageUrl}
                     title={message.title}
                     body={message.body}
                     dateTimeStamp={message.dateTimeStamp} />
        );
        });
        return(
        <div class="messageList">

            @*<h2>Raw data: {this.state.rawData} from {this.props.url}</h2>*@
            {messageNodes}
        </div>
        )
        }
        });


        var PageFooter = React.createClass({
        render: function() {
        return (
        <div className="page-footer"><h1><span className="label-info"> Built for Solution Collective Interview </span></h1></div>
        );
        }
        });

        @*render the updated page header to let me know React rendering scripts loaded properly (they sometimes break with new NuGet updates)*@
        ReactDOM.render(
        <PageHeader />,document.getElementById('page-header')
        );
        @*Shoutout to Solution Collective*@
        @*ReactDOM.render(
            <PageFooter />,document.getElementById('page-footer')
            );*@
        @*render the widget to allow a new message to be sent*@

        @*Form submission isn't quite working, not sure why, newbie problems probably, defaulting to a form based input with ASP.Net MVC*@
        @*ReactDOM.render(
            <PageForm submitUrl="/api/message" />,document.getElementById('new-message-form')
            );*@
        @*render the widget that shows all messages already sent*@
        ReactDOM.render(
        <PageMessageList url="/api/message" pollInterval={2000} />,document.getElementById('display-messages-panel')
        )
    </script>
</body>
</html>
